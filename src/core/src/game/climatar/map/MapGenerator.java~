package game.climatar.map;
import java.util.function;

public class MapGenerator {
	
	abstract class Thresholder {
		abstract int threshold(float x);
	}

	/**
	 * holds metadata pertaining to the world map
	 */
	public class WorldMap {
		// terrain map 0 ... 8 <=> ice ... mountains
		public int[][] terrain;
		// nation map 0 ... 3 <=> fire ... air
		public int[][] nations;

		private WorldMap(int[][] terrain, int[][] nations) {
			this.terrain = terrain;
			this.nations = nations;
		}
	}

	/**
	 * procedurally generates and returns map metadata
	 * @param n map dimensions are based off of 2^n
	 * @param wmult relative width multiplier, using the base calculated with n
	 * @param hmult relative height multiplier, using the base calculated with n
	 * @return WorldMap metadata container
	 */
	public static WorldMap generateMap(int n, 
									   int wmult,
									   int hmult,
									   float smoothness) {
		
		// get noise from fractal noise class
		float[][] noise = MidpointDisplacement.noise(n, wmult, hmult, smoothness);

		// apply weighting for northern and southern water tribes
		for (int row = 0; row < noise.length; row++) {
			float f = (float) Math.sin(Math.PI * (float) row / noise.length);
			for (int col = 0; col < noise[row].length; col++) {
				noise[row][col] = noise[row][col] * f;
			}
		}
		
		int[][] terrain = threshold(noise, new Thresholder() {

				// thresholds determining cutoffs for different terrain types
				float ice = 0.205f;
				float deepWater = 0.34f;
				float shallowWater = 0.4f;
				float desert = 0.45f;
				float plains = 0.54f;
				float grassland = 0.75f;
				float forest = 0.8f;
				float hills = 0.88f;

				int threshold(double x) {
					if (x < ice) return 0;
					else if (x < deepWater) return 1;
					else if (x < shallowWater) return 2;
					else if (x < desert) return 3;
					else if (x < plains) return 4;
					else if (x < grassland) return 5;
					else if (x < forest) return 6;
					else if (x < hills) return 7;
					else return 8;
				}
			});

		int[][] nations = threshold(noise, new Thresholder() {

				// thresholds determining cutoffs for nations
				float waterNation = 0.3f;
				float earthOrFireNation = 0.3f;

				int threshold(double x) {
					return 0;
				}
			});
		
		return new WorldMap(terrain, nations);
	}

	private static int[][] threshold(float[][] noise,
									 Thresholder t) {
		int[][] thresholded;
		for (int row = 0; row < noise.length; row++) {
			for (int col = 0; col < noise[row].length; col++){
				thresholded[row][col] = t.threshold(noise[row][col]);
			}
		}
		return thresholded;
	}
}
